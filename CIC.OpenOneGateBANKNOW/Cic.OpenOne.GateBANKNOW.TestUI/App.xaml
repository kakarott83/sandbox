<Application x:Class="Cic.OpenOne.GateBANKNOW.TestUI.App"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:convert="clr-namespace:Cic.OpenOne.GateBANKNOW.TestUI.Converters"
             xmlns:local="clr-namespace:Cic.OpenOne.GateBANKNOW.TestUI"
   
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <SolidColorBrush x:Key="darkGrayBrush" Color="DarkGray"/>

        <!-- TextBoxBaseStyle-->
        <Style x:Key="TextBoxBaseStyle" TargetType="TextBox">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid>
                            <AdornedElementPlaceholder/>
                            <Grid  HorizontalAlignment="Right" Margin="2">
                                <Ellipse Fill="Red" Width="16" Height="16"/>
                                <TextBlock Foreground="White" FontWeight="Bold" Text="!"
									     HorizontalAlignment="Center"
									     VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Right"/>
            <Setter Property="Background" Value="Black"/>
            <Setter Property="Foreground" Value="LightGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="MinWidth" Value="200"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- TextBoxBaseStyle-->
        <Style x:Key="TextBlockBaseStyle" TargetType="TextBlock">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid>
                            <AdornedElementPlaceholder/>
                            <Grid  HorizontalAlignment="Right" Margin="2">
                                <Ellipse Fill="Red" Width="16" Height="16"/>
                                <TextBlock Foreground="White" FontWeight="Bold" Text="!"
									     HorizontalAlignment="Center"
									     VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Height" Value="200"/>
            <Setter Property="MinWidth" Value="200"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- DataGridCellBaseStyle-->
        <Style x:Key="DataGridCellBaseStyle" TargetType="DataGridCell">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid>
                            <AdornedElementPlaceholder/>
                            <Grid  HorizontalAlignment="Right" Margin="2">
                                <Ellipse Fill="Red" Width="16" Height="16"/>
                                <TextBlock Foreground="White" FontWeight="Bold" Text="!"
									     HorizontalAlignment="Center"
									     VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>

            </Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- ComboBoxBaseStyle-->
        <Style x:Key="ComboBoxBaseStyle" TargetType="ComboBox">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid>
                            <AdornedElementPlaceholder/>
                            <Grid  HorizontalAlignment="Right" Margin="2">
                                <Ellipse Fill="Red" Width="16" Height="16"/>
                                <TextBlock Foreground="White" FontWeight="Bold" Text="!"
									     HorizontalAlignment="Center"
									     VerticalAlignment="Center"/>
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Background" Value="Black"/>
            <Setter Property="Foreground" Value="LightGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="White"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="MinWidth" Value="200"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#333333"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="true">
                    <Setter Property="Background" Value="Black"/>
                    <Setter Property="BorderBrush" Value="Gray"/>
                </Trigger>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- TreeViewExpandCollapse-->
        <Style x:Key="styleTreeViewExpandCollapse" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Image x:Name="image" Source="..\Images\tree.png" />
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="image" Property="Source" Value="..\Images\tree_open.png" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- TreeViewExpandCollapse-->
        <Style  TargetType="TreeViewItem">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" Grid.Column="0" Style="{StaticResource styleTreeViewExpandCollapse}" IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Width="6" Height="7"/>
                            <ContentPresenter x:Name="Tree_Header" Grid.Column="1" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Width" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Tree_Header" Property="MinWidth" Value="75"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="HasHeader" Value="false"/>
                                    <Condition Property="Height" Value="Auto"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="Tree_Header" Property="MinHeight" Value="19"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>



        <!-- Border  -->
        <Style x:Key="DetailsBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <GradientStop Offset="0" Color="#000000"/>
                        <GradientStop Offset="1" Color="#555555"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="CornerRadius" Value="5"/>
            <Setter Property="BorderBrush" Value="Gray"/>
            <Setter Property="BorderThickness" Value="2"/>
        </Style>

        <!--  Label  -->
        <Style TargetType="{x:Type Label}">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="TextElement.Foreground" Value="White"/>
        </Style>

        <!-- DataGridRow -->
        <Style x:Key="DecisionDataGridRowStyle" TargetType="{x:Type DataGridRow}">

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" Value="White" />
                    <Setter Property="TextElement.Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="true">
                    <Setter Property="Background" Value="#444444"/>
                    <Setter Property="TextElement.Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- DataGridRow -->
        <Style x:Key="GridTest" TargetType="{x:Type DataGrid}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                </Trigger>
            </Style.Triggers>
        </Style>



        <!-- DataGridColumnHeader -->
        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>

        <!-- DataGridCell -->
        <Style TargetType="DataGridCell">
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="true">
                    <Setter Property="Background" Value="{StaticResource darkGrayBrush}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource darkGrayBrush}"/>
                    <Setter Property="TextElement.Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!--Statusbar -->
        <Style TargetType="{x:Type StatusBar}">
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <GradientStop Offset="0" Color="#555555"/>
                        <GradientStop Offset="1" Color="#000000"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- MenuItems -->
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="Foreground" Value="Black"/>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Foreground" Value="Gray"/>
                </Trigger>
            </Style.Triggers>
        </Style>

      

        <!-- Konverters-->
        <convert:InvertableBoolToVisibleConverter Inverted="True" x:Key="BooleanToVisibilityInverted"/>
        <convert:DateTimeConverter  x:Key="DateTimeConverter"/>

        <!-- ObjectDataProvider-->
        <ObjectDataProvider x:Key="kantonen" 
                        MethodName="GetKantonen" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="wohnverhaeltnis" 
                        MethodName="GetWohnverhaeltnis" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="zivilstand" 
                        MethodName="GetZivilstand" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="anrede" 
                        MethodName="GetAnrede" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="zinsart" 
                        MethodName="GetZinsart" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="quellensteuer" 
                        MethodName="GetQuellensteuer" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="kalkcode" 
                        MethodName="GetKalkcode" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="pruefungenType" 
                        MethodName="PruefungenTypeDecisionEngine" ObjectType="{x:Type local:ListenDataProvider}">
        </ObjectDataProvider>




        <!-- Background Header -->
        <LinearGradientBrush x:Key="HeaderBackground" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Offset="0" Color="Black"/>
            <GradientStop Offset="0.7" Color="Gray"/>
            <GradientStop Offset="1" Color="White"/>
        </LinearGradientBrush>
        


    </Application.Resources>
</Application>

