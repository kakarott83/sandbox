//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Cic.OpenOne.Common.DAO.Sms
{
    using System.Net.Http;

#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwisscomSmsClient
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SwisscomSmsClient(string baseUrl)
        {
            BaseUrl = baseUrl;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareClientHandler(System.Net.Http.HttpClientHandler handler);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>download mprorest.json</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> AnonymousAsync()
        {
            return AnonymousAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>download mprorest.json</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public FileResponse Anonymous()
        {
            return System.Threading.Tasks.Task.Run(async () => await AnonymousAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <summary>download mprorest.json</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<FileResponse> AnonymousAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/");

            var clientHandler_ = new HttpClientHandler();
            PrepareClientHandler(clientHandler_);
            var client_ = new System.Net.Http.HttpClient(clientHandler_);
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206")
                        {
                            var responseStream_ = await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, client_, response_);
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                            }

                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>send a short message</summary>
        /// <param name="accountId">Account Identifier, may be same as User ID</param>
        /// <returns>Successful response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SMResponse> SubmitSmByAccountIdAsync(string accountId, SMRequest body)
        {
            return SubmitSmByAccountIdAsync(accountId, body, System.Threading.CancellationToken.None);
        }

        /// <summary>send a short message</summary>
        /// <param name="accountId">Account Identifier, may be same as User ID</param>
        /// <returns>Successful response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public SMResponse SubmitSmByAccountId(string accountId, SMRequest body)
        {
            return System.Threading.Tasks.Task.Run(async () => await SubmitSmByAccountIdAsync(accountId, body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <summary>send a short message</summary>
        /// <param name="accountId">Account Identifier, may be same as User ID</param>
        /// <returns>Successful response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SMResponse> SubmitSmByAccountIdAsync(string accountId, SMRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/submit_sm/{AccountId}");
            urlBuilder_.Replace("{AccountId}", System.Uri.EscapeDataString(System.Convert.ToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

            var clientHandler_ = new HttpClientHandler();
            PrepareClientHandler(clientHandler_);
            var client_ = new System.Net.Http.HttpClient(clientHandler_);
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(SMResponse);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SMResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                            if (status_ == "400")
                            {
                                var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                var result_ = default(ErrorResponse);
                                try
                                {
                                    result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                                }
                                catch (System.Exception exception_)
                                {
                                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                                }
                                throw new SwaggerException<ErrorResponse>("Malformed/Invalid", status_, responseData_, headers_, result_, null);
                            }
                            else
                                if (status_ != "200" && status_ != "204")
                                {
                                    var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                                }

                        return default(SMResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>receive short messages</summary>
        /// <param name="accountId">Account Identifier, may be same as User ID</param>
        /// <returns>Successful response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DSMResponse>> CollectByAccountIdAsync(string accountId)
        {
            return CollectByAccountIdAsync(accountId, System.Threading.CancellationToken.None);
        }

        /// <summary>receive short messages</summary>
        /// <param name="accountId">Account Identifier, may be same as User ID</param>
        /// <returns>Successful response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Collections.ObjectModel.ObservableCollection<DSMResponse> CollectByAccountId(string accountId)
        {
            return System.Threading.Tasks.Task.Run(async () => await CollectByAccountIdAsync(accountId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <summary>receive short messages</summary>
        /// <param name="accountId">Account Identifier, may be same as User ID</param>
        /// <returns>Successful response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<DSMResponse>> CollectByAccountIdAsync(string accountId, System.Threading.CancellationToken cancellationToken)
        {
            if (accountId == null)
                throw new System.ArgumentNullException("accountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/collect/{AccountId}");
            urlBuilder_.Replace("{AccountId}", System.Uri.EscapeDataString(System.Convert.ToString(accountId, System.Globalization.CultureInfo.InvariantCulture)));

            var clientHandler_ = new HttpClientHandler();
            PrepareClientHandler(clientHandler_);
            var client_ = new System.Net.Http.HttpClient(clientHandler_);
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<DSMResponse>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<DSMResponse>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                            if (status_ == "400")
                            {
                                var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                var result_ = default(ErrorResponse);
                                try
                                {
                                    result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                                }
                                catch (System.Exception exception_)
                                {
                                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                                }
                                throw new SwaggerException<ErrorResponse>("Malformed/Invalid", status_, responseData_, headers_, result_, null);
                            }
                            else
                                if (status_ != "200" && status_ != "204")
                                {
                                    var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                                }

                        return default(System.Collections.ObjectModel.ObservableCollection<DSMResponse>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorResponse
    {
        /// <summary>Error Code</summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public double ErrorCode { get; set; }

        /// <summary>Error Message</summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Always)]
        public string ErrorMessage { get; set; }

        /// <summary>Error Details</summary>
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Always)]
        public string ErrorDetails { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SMRequest
    {
        /// <summary>UTF-8 string or Base64 enoded binary</summary>
        [Newtonsoft.Json.JsonProperty("short_message", Required = Newtonsoft.Json.Required.Always)]
        public string Short_message { get; set; }

        /// <summary>Recipient mobile number or LongId in international format. e.g. +41791234567</summary>
        [Newtonsoft.Json.JsonProperty("destination_addr", Required = Newtonsoft.Json.Required.Always)]
        public string Destination_addr { get; set; }

        /// <summary>Originator ShortId or alfanumeric sender or LongId ininternational format. e.g. +41791234567. Defaults to ShortID of theaccount and may not be overridable for some accounts</summary>
        [Newtonsoft.Json.JsonProperty("source_addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source_addr { get; set; }

        /// <summary>SMPP PDU attribute used to indicate special short message attributes.`default` : (esm_class=0) is the default which submits a normal store and forward SMS`flash` : (esm_class=1) creates a flash/datagram-SMS`delivery_receipt` : (esm_class=4) produces an MC delivery receipt. Refer to <a href="http://opensmpp.org/specs/smppv50.pdf">section 4.7.12</a> and verify SMSC support for other numeric values</summary>
        [Newtonsoft.Json.JsonProperty("esm_class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Esm_class { get; set; }

        /// <summary>Encoding scheme of the short message. Possible values:`utf8` : 'short_message' field contains UTF-8 encoded plaintext string. While converting to SMPP, MPro uses IA5/ASCII (data_coding=1) if an accurate text representation can be achieved. Otherwise UCS2 (data_coding=8) is used.`utf8_compact` : 'short_message' field contains UTF-8 encoded plaintext string. While converting to SMPP, MPro uses IA5/ASCII (data_coding=1). Any UTF-8 characters which can't be transformed to IA5 are approximated.`&lt;number>` : 'short_message' field contains Base64 encoded binary data. While converting to SMPP, no attempt is made to interpret the data. The  Base64-decoded short_message is directly used in SMPP PDU. The data_coding field is converted to a number and also used directly in the PDU. Refer to <a href="http://opensmpp.org/specs/smppv50.pdf">section 4.7.7</a> and verify SMSC support for more exotic values</summary>
        [Newtonsoft.Json.JsonProperty("data_coding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Data_coding { get; set; }

        /// <summary>Sets the SMPP replace_if_present_flag. Defaults to false</summary>
        [Newtonsoft.Json.JsonProperty("replace_if_present_flag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Replace_if_present_flag { get; set; }

        /// <summary>Sets the SMS expiry time in absolute or relative format. If not given, a relative SMSC system default is used (e.g. 2 days). Refer to <a href="http://opensmpp.org/specs/smppv50.pdf">section 4.7.23.2</a> for formatting options</summary>
        [Newtonsoft.Json.JsonProperty("validity_period", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Validity_period { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SMRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SMRequest>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SMResponse
    {
        /// <summary>SMPP result code</summary>
        [Newtonsoft.Json.JsonProperty("command_status", Required = Newtonsoft.Json.Required.Always)]
        public double Command_status { get; set; }

        /// <summary>SMSC message id, mutually exclusive with `message_ids`</summary>
        [Newtonsoft.Json.JsonProperty("message_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message_id { get; set; }

        /// <summary>SMSC message ids array, mutually exclusive with `message_id`</summary>
        [Newtonsoft.Json.JsonProperty("message_ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Message_ids { get; set; }

        /// <summary>SMSC message sequence number, mutually exclusive with `sequence_numbers`</summary>
        [Newtonsoft.Json.JsonProperty("sequence_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence_number { get; set; }

        /// <summary>SMSC message sequence numbers array, mutually exclusive with `sequence_number`</summary>
        [Newtonsoft.Json.JsonProperty("sequence_numbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Sequence_numbers { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SMResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SMResponse>(data);
        }
    }

    /// <summary>MO message (SMPP deliver_sm)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.9.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DSMResponse
    {
        /// <summary>SMPP sequence_number needed to acknowledge/commit MO message</summary>
        [Newtonsoft.Json.JsonProperty("sequence_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence_number { get; set; }

        /// <summary>SMSC message ids</summary>
        [Newtonsoft.Json.JsonProperty("source_addr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source_addr { get; set; }

        /// <summary>UTF-8 string or Base64 enoded binary</summary>
        [Newtonsoft.Json.JsonProperty("short_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Short_message { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DSMResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DSMResponse>(data);
        }
    }

    public class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public string StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == "206"; }
        }

        public FileResponse(string statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.9.0 (NJsonSchema v9.10.9.0 (Newtonsoft.Json v9.0.0.0))")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}